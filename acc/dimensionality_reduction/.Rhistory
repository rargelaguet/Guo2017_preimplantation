library(data.table)
library(purrr)
library(ggplot2)
library(ggpubr)
if (grepl("ricard",Sys.info()['nodename'])) {
source("/Users/ricard/Guo_2017/settings.R")
} else if (grepl("yoda",Sys.info()['nodename'])) {
source("/homes/ricard/Guo_2017/settings.R")
} else {
stop("Computer not recognised")
}
io$outdir <- paste0(io$basedir,"/met/qc")
# Define which cells to use
opts$cells <- sample_metadata %>% .[,id_acc] %>% as.character
sample_metadata <- sample_metadata %>% .[id_acc%in%opts$cells]
dt <- list()
for (i in opts$cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$acc_data_raw,i))) {
dt[[i]] <- fread(
file = sprintf("%s/%s.tsv.gz",io$acc_data_raw,i),
sep="\t", verbose=F, header=F, colClasses = list(factor=1, integer=2, numeric=3)
) %>% setnames(c("chr","pos","rate")) %>%
.[chr=="MT"] %>%
.[,id_acc:=as.factor(i)]
} else {
print(sprintf("Sample %s not found",i))
}
}
dt <- rbindlist(dt) %>% .[,chr:=as.factor(chr)]
dt <- list()
for (i in opts$cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$acc_data_raw,i))) {
dt[[i]] <- fread(
file = sprintf("%s/%s.tsv.gz",io$acc_data_raw,i),
sep="\t", verbose=F, header=F, colClasses = list(factor=1, integer=2, numeric=3)
) %>% setnames(c("chr","pos","rate")) %>%
.[chr=="M"] %>%
.[,id_acc:=as.factor(i)]
} else {
print(sprintf("Sample %s not found",i))
}
}
dt <- rbindlist(dt) %>% .[,chr:=as.factor(chr)]
# Filter cells by coverage
dt <- dt[,coverage:=.N,by="id_acc"] %>% .[coverage>100]
to.plot <- dt[,.(mean=mean(rate)), by="id_acc"] %>%
merge(sample_metadata,by="id_acc")%>%
setkey(mean) %>% .[,id_acc:=factor(id_acc,levels=id_acc)]
p <- ggbarplot(to.plot, x="id_acc", y="mean", size=0.25, fill="#F8766D",
facet="stage", scales="free_x") +
labs(x="", y="MT accessibility (%)") +
coord_cartesian(ylim=c(0,1)) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
print(p)
# pdf(file=paste0(io$outdir,"/qc_met.pdf"), width=8, height=5)
# print(p)
# dev.off()
if (grepl("ricard",Sys.info()['nodename'])) {
source("/Users/ricard/Guo_2017/settings.R")
} else if (grepl("yoda",Sys.info()['nodename'])) {
source("/homes/ricard/Guo_2017/settings.R")
} else {
stop("Computer not recognised")
}
io$outdir <- paste0(io$basedir,"/met/stats")
io$pdfdir <- paste0(io$basedir,"/met/results/sex")
# Define which chromosomes to look at
opts$chr <- c("X","Y","1")
# Define which cells to use
opts$cells <- sample_metadata %>% .[,id_acc]
# fwrite(stats, file=paste0(io$outdir,"/sample_stats_per_chr.txt"), sep="\t", row.names=F, col.names=T)
stats <- fread(paste0(io$outdir,"/sample_stats_per_chr.txt"))
stats <- data.table(expand.grid(opts$cells,opts$chr)) %>% setnames(c("id_acc","chr")) %>%
.[,c("coverage","mean"):=as.numeric(NA)]
for (i in opts$cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$acc_data_raw,i))) {
# Load sample accessibility data
data <- fread(
file = sprintf("%s/%s.tsv.gz",io$acc_data_raw,i),
sep="\t", verbose=F, header=F, colClasses = list(factor=1, integer=2, numeric=3)
) %>% setnames(c("chr","pos","rate")) %>%
.[chr%in%opts$chr]
# Compute chromosome-wide statistics
for (j in opts$chr) {
stats[id_acc==i & chr==j, c("coverage","mean"):=list(nrow(data[chr==j]),mean(data[chr==j]$rate)*100)]
}
} else {
print(sprintf("Sample %s not found for accessibility",i))
}
}
opts$cells <- head(opts$cells, n=3)
stats <- data.table(expand.grid(opts$cells,opts$chr)) %>% setnames(c("id_acc","chr")) %>%
.[,c("coverage","mean"):=as.numeric(NA)]
for (i in opts$cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$acc_data_raw,i))) {
# Load sample accessibility data
data <- fread(
file = sprintf("%s/%s.tsv.gz",io$acc_data_raw,i),
sep="\t", verbose=F, header=F, colClasses = list(factor=1, integer=2, numeric=3)
) %>% setnames(c("chr","pos","rate")) %>%
.[chr%in%opts$chr]
# Compute chromosome-wide statistics
for (j in opts$chr) {
stats[id_acc==i & chr==j, c("coverage","mean"):=list(nrow(data[chr==j]),mean(data[chr==j]$rate)*100)]
}
} else {
print(sprintf("Sample %s not found for accessibility",i))
}
}
View(stats)
library(data.table)
library(purrr)
library(ggplot2)
library(ggpubr)
if (grepl("ricard",Sys.info()['nodename'])) {
source("/Users/ricard/Guo_2017/settings.R")
} else if (grepl("yoda",Sys.info()['nodename'])) {
source("/homes/ricard/Guo_2017/settings.R")
} else {
stop("Computer not recognised")
}
io$outdir <- paste0(io$basedir,"/met/stats")
io$pdfdir <- paste0(io$basedir,"/met/results/sex")
# Define which chromosomes to look at
opts$chr <- c("X","Y","1")
# Define which cells to use
opts$cells <- sample_metadata %>% .[,id_acc]
stats <- data.table(expand.grid(opts$cells,opts$chr)) %>% setnames(c("id_acc","chr")) %>%
.[,c("coverage","mean"):=as.numeric(NA)]
for (i in opts$cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$acc_data_raw,i))) {
# Load sample accessibility data
data <- fread(
file = sprintf("%s/%s.tsv.gz",io$acc_data_raw,i),
sep="\t", verbose=F, header=F, colClasses = list(factor=1, integer=2, numeric=3)
) %>% setnames(c("chr","pos","rate")) %>%
.[chr%in%opts$chr]
# Compute chromosome-wide statistics
for (j in opts$chr) {
stats[id_acc==i & chr==j, c("coverage","mean"):=list(nrow(data[chr==j]),mean(data[chr==j]$rate)*100)]
}
} else {
print(sprintf("Sample %s not found for accessibility",i))
}
}
# fwrite(stats, file=paste0(io$outdir,"/sample_stats_per_chr.txt"), sep="\t", row.names=F, col.names=T)
stats <- fread(paste0(io$outdir,"/sample_stats_per_chr.txt"))
fwrite(stats, file=paste0(io$outdir,"/sample_stats_per_chr.txt"), sep="\t", row.names=F, col.names=T)
io$outdir
stats <- fread(paste0(io$outdir,"/sample_stats_per_chr.txt"))
# stats <- stats[complete.cases(stats)]
View(stats)
to.plot <- stats %>%
dcast(id_acc~chr, value.var="coverage") %>%
merge(sample_metadata, by="id_acc") %>%
.[,.(ratio=sum(Y)/sum(X)), by=c("embryo","stage")]
library(data.table)
library(purrr)
io <- list()
io$basedir <- "/Users/ricard/data/Guo_2017"
io$metadata <- paste0(io$basedir,"/sample_metadata.txt")
sample_metadata <- fread(io$metadata)
# Check for duplicate cells
# Define assay (scMT-seq, scNMT-seq, scRNA-seq)
strsplit(sample_metadata$sample)
# Check for duplicate cells
# Define assay (scMT-seq, scNMT-seq, scRNA-seq)
strsplit(sample_metadata$sample, split="_")
io$metadata <- paste0(io$basedir,"/tmp.txt")
sample_metadata <- fread(io$metadata)
sample_metadata[grep("embryo"sample_metadata$sample)]
grep("embryo"sample_metadata$sample)
sample_metadata$sample
sample_metadata[grepl("embryo"sample_metadata$sample)]
grepl("embryo"sample_metadata$sample)
sample_metadata[grepl("embryo",sample_metadata$sample)]
foo <- sample_metadata[grepl("embryo",sample_metadata$sample)]
head(foo)
strsplit(foo$sample, split="_")
foo[,c("sample")]
io$metadata
fwrite(foo, io$metadata, sep="\t", col.names=T, row.names=F, na="NA", quote=F)
fwrite(foo[,c("sample")], io$metadata, sep="\t", col.names=T, row.names=F, na="NA", quote=F)
foo <- fread(io$metadata)
foo <- fread(io$metadata)
io$metadata
foo <- fread(io$metadata)
io$metadata <- paste0(io$basedir,"/tmp.txt")
foo <- fread(io$metadata)
foo <- fread(io$metadata)
io$metadata <- paste0(io$basedir,"/sample_metadata.txt")
sample_metadata <- fread(io$metadata)
bar <- sample_metadata %>% merge(foo,by="sample", all.x = T)
View(bar)
View(bar)
fwrite(io$metadata, io$metadata, sep="\t", col.names=T, row.names=F, na="NA", quote=F)
fwrite(bar, io$metadata, sep="\t", col.names=T, row.names=F, na="NA", quote=F)
library(data.table)
library(purrr)
library(ggplot2)
library(ggpubr)
if (grepl("ricard",Sys.info()['nodename'])) {
source("/Users/ricard/Guo_2017/settings.R")
} else if (grepl("yoda",Sys.info()['nodename'])) {
source("/homes/ricard/Guo_2017/settings.R")
} else {
stop("Computer not recognised")
}
io$outdir <- paste0(io$basedir,"/met/stats")
io$pdfdir <- paste0(io$basedir,"/met/results/sex")
# Define which chromosomes to look at
opts$chr <- c("X","Y","1")
# Define which cells to use
opts$cells <- sample_metadata %>% .[,id_acc]
# stats <- data.table(expand.grid(opts$cells,opts$chr)) %>% setnames(c("id_acc","chr")) %>%
#   .[,c("coverage","mean"):=as.numeric(NA)]
#
# for (i in opts$cells) {
#   if (file.exists(sprintf("%s/%s.tsv.gz",io$acc_data_raw,i))) {
#
#     # Load sample accessibility data
#     data <- fread(
#       file = sprintf("%s/%s.tsv.gz",io$acc_data_raw,i),
#       sep="\t", verbose=F, header=F, colClasses = list(factor=1, integer=2, numeric=3)
#     ) %>% setnames(c("chr","pos","rate")) %>%
#       .[chr%in%opts$chr]
#
#     # Compute chromosome-wide statistics
#     for (j in opts$chr) {
#       stats[id_acc==i & chr==j, c("coverage","mean"):=list(nrow(data[chr==j]),mean(data[chr==j]$rate)*100)]
#     }
#
#   } else {
#     print(sprintf("Sample %s not found for accessibility",i))
#   }
# }
#
# fwrite(stats, file=paste0(io$outdir,"/sample_stats_per_chr.txt"), sep="\t", row.names=F, col.names=T)
stats <- fread(paste0(io$outdir,"/sample_stats_per_chr.txt"))
# stats <- stats[complete.cases(stats)]
to.plot <- stats %>%
dcast(id_acc~chr, value.var="coverage") %>%
merge(sample_metadata, by="id_acc") %>%
.[,.(ratio=sum(Y)/sum(X)), by=c("embryo","stage")]
to.plot
p <- ggbarplot(to.plot, x="embryo", y="ratio", fill="gray70", sort.val="desc") +
facet_grid(~stage, scales="free_x", space = "free_x") +
labs(x="Embryo", y="Y/X coverage") +
theme(
axis.ticks.x = element_blank(),
axis.text.x = element_blank()
)
head(to.plot)
View(sample_metadata)
to.plot <- to.plot[!is.na(embryo)]
p <- ggbarplot(to.plot, x="embryo", y="ratio", fill="gray70", sort.val="desc") +
# facet_grid(~stage, scales="free_x", space = "free_x") +
labs(x="Embryo", y="Y/X coverage") +
theme(
axis.ticks.x = element_blank(),
axis.text.x = element_blank()
)
View(to.plot)
duplicated(to.plot$embryo)
to.plot$embryo[duplicated(to.plot$embryo)]
View(sample_metadata)
library(data.table)
library(purrr)
library(ggplot2)
library(ggpubr)
if (grepl("ricard",Sys.info()['nodename'])) {
source("/Users/ricard/Guo_2017/settings.R")
} else if (grepl("yoda",Sys.info()['nodename'])) {
source("/homes/ricard/Guo_2017/settings.R")
} else {
stop("Computer not recognised")
}
io$outdir <- paste0(io$basedir,"/met/stats")
io$pdfdir <- paste0(io$basedir,"/met/results/sex")
# Define which chromosomes to look at
opts$chr <- c("X","Y","1")
# Define which cells to use
opts$cells <- sample_metadata %>% .[,id_acc]
# stats <- data.table(expand.grid(opts$cells,opts$chr)) %>% setnames(c("id_acc","chr")) %>%
#   .[,c("coverage","mean"):=as.numeric(NA)]
#
# for (i in opts$cells) {
#   if (file.exists(sprintf("%s/%s.tsv.gz",io$acc_data_raw,i))) {
#
#     # Load sample accessibility data
#     data <- fread(
#       file = sprintf("%s/%s.tsv.gz",io$acc_data_raw,i),
#       sep="\t", verbose=F, header=F, colClasses = list(factor=1, integer=2, numeric=3)
#     ) %>% setnames(c("chr","pos","rate")) %>%
#       .[chr%in%opts$chr]
#
#     # Compute chromosome-wide statistics
#     for (j in opts$chr) {
#       stats[id_acc==i & chr==j, c("coverage","mean"):=list(nrow(data[chr==j]),mean(data[chr==j]$rate)*100)]
#     }
#
#   } else {
#     print(sprintf("Sample %s not found for accessibility",i))
#   }
# }
#
# fwrite(stats, file=paste0(io$outdir,"/sample_stats_per_chr.txt"), sep="\t", row.names=F, col.names=T)
stats <- fread(paste0(io$outdir,"/sample_stats_per_chr.txt"))
# stats <- stats[complete.cases(stats)]
to.plot <- stats %>%
dcast(id_acc~chr, value.var="coverage") %>%
merge(sample_metadata, by="id_acc") %>%
.[,.(ratio=sum(Y)/sum(X)), by=c("embryo","stage")]
to.plot <- to.plot[!is.na(embryo)]
p <- ggbarplot(to.plot, x="embryo", y="ratio", fill="gray70", sort.val="desc") +
# facet_grid(~stage, scales="free_x", space = "free_x") +
labs(x="Embryo", y="Y/X coverage") +
theme(
axis.ticks.x = element_blank(),
axis.text.x = element_blank()
)
# pdf(paste0(io$pdfdir,"/sex_determination_met.pdf"), width=9, height=5, useDingbats = F)
print(p)
# dev.off()
library(data.table)
library(purrr)
library(tidyr)
library(ggplot2)
library(cowplot)
barplot_theme <- function() {
p <- theme(
axis.title.x = element_blank(),
axis.title.y = element_text(colour="black", size=15),
axis.text.y = element_text(colour="black",size=rel(1.2)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks = element_line(colour="black", size=rel(0.7)),
legend.position="none",
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
}
if (grepl("ricard",Sys.info()['nodename'])) {
source("/Users/ricard/Guo_2017/settings.R")
} else if (grepl("yoda",Sys.info()['nodename'])) {
source("/homes/ricard/Guo_2017/settings.R")
} else {
stop("Computer not recognised")
}
io$outdir <- paste0(io$basedir,"/acc/qc")
opts$labs <- c("nichols")
# Define which cells to use
opts$cells <- sample_metadata %>% .[,id_acc]
# Filtering optionsopts$cell
opts$acc_coverage_threshold <- 2e6
opts$max.acc.rate <- 60
opts$min.acc.rate <- 20
sample_metadata <- sample_metadata %>% .[id_acc%in%opts$cells]
stats <- fread(io$met.stats) %>% merge(sample_metadata,by="id_acc")
stats <- fread(io$acc.stats) %>% merge(sample_metadata,by="id_acc")
table(sample_metadata$stage)
tmp <- stats[,c("id_acc","coverage")] %>% setkey(coverage) %>% .[,id_acc:=factor(id_acc,levels=id_acc)]
p <- ggplot(tmp, aes(x=id_acc, y=log10(coverage))) +
geom_bar(stat="identity", position="dodge", fill="#00BFC4", color="#00BFC4") +
labs(title="", x="", y="Number of observed CpG sites (log10)") +
geom_hline(yintercept=log10(opts$acc_coverage_threshold), colour="black", linetype="dashed") +
barplot_theme() +
# scale_y_continuous(expand=c(0,0), limits=c(0,4e+6)) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
print(p)
# pdf(file=paste0(io$outdir,"/qc_acc.pdf"), width=8, height=5)
# print(p1)
# dev.off()
tmp <- stats[,c("id_acc","mean")] %>% setkey(mean) %>% .[,id_acc:=factor(id_acc,levels=id_acc)]
p <- ggplot(tmp, aes(x=id_acc, y=mean)) +
geom_bar(stat="identity", position="dodge", fill="#00BFC4", color="#00BFC4") +
labs(title="", x="", y="Global accessibility (%)") +
geom_hline(yintercept=opts$max.meth.rate, colour="black", linetype="dashed") +
geom_hline(yintercept=opts$min.meth.rate, colour="black", linetype="dashed") +
barplot_theme() +
# scale_y_continuous(expand=c(0,0), limits=c(0,4e+6)) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
print(p)
# pdf(file=paste0(io$outdir,"/qc_acc.pdf"), width=8, height=5)
# print(p1)
# dev.off()
tmp <- stats[,c("id_acc","mean")] %>% setkey(mean) %>% .[,id_acc:=factor(id_acc,levels=id_acc)]
p <- ggplot(tmp, aes(x=id_acc, y=mean)) +
geom_bar(stat="identity", position="dodge", fill="#00BFC4", color="#00BFC4") +
labs(title="", x="", y="Global accessibility (%)") +
geom_hline(yintercept=opts$max.acc.rate, colour="black", linetype="dashed") +
geom_hline(yintercept=opts$min.acc.rate, colour="black", linetype="dashed") +
barplot_theme() +
# scale_y_continuous(expand=c(0,0), limits=c(0,4e+6)) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
print(p)
# pdf(file=paste0(io$outdir,"/qc_acc.pdf"), width=8, height=5)
# print(p1)
# dev.off()
to.plot <- stats %>%
.[,pass_accQC2:=ifelse(id_acc%in%failqc,F,T)]
tmp <- stats[,c("id_acc","mean")] %>% setkey(mean) %>% .[,id_acc:=factor(id_acc,levels=id_acc)]
p <- ggplot(tmp, aes(x=id_acc, y=mean)) +
geom_bar(stat="identity", position="dodge", fill="#00BFC4", color="#00BFC4") +
labs(title="", x="", y="Global accessibility (%)") +
# geom_hline(yintercept=opts$max.acc.rate, colour="black", linetype="dashed") +
# geom_hline(yintercept=opts$min.acc.rate, colour="black", linetype="dashed") +
barplot_theme() +
# scale_y_continuous(expand=c(0,0), limits=c(0,4e+6)) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
print(p)
# pdf(file=paste0(io$outdir,"/qc_acc.pdf"), width=8, height=5)
# print(p1)
# dev.off()
to.plot <- stats
p <- ggplot(to.plot, aes(x=log10(coverage), y=mean, color=lineage)) +
geom_point() +
labs(x="Number of observed GpC sites", y="Mean accessibility (%)") +
scale_color_brewer(palette = "Dark2") +
theme_classic()
print(p)
to.plot <- stats
p <- ggplot(to.plot, aes(x=log10(coverage), y=mean, color=stage)) +
geom_point() +
labs(x="Number of observed GpC sites", y="Mean accessibility (%)") +
scale_color_brewer(palette = "Dark2") +
theme_classic()
print(p)
# pdf(file=paste0(io$outdir,"/qc_acc.pdf"), width=8, height=5)
# print(p1)
# dev.off()
tmp <- stats[,c("id_acc","mean")] %>% setkey(mean) %>% .[,id_acc:=factor(id_acc,levels=id_acc)]
p <- ggplot(tmp, aes(x=id_acc, y=mean)) +
geom_bar(stat="identity", position="dodge", fill="#00BFC4", color="#00BFC4") +
labs(title="", x="", y="Global accessibility (%)") +
# geom_hline(yintercept=opts$max.acc.rate, colour="black", linetype="dashed") +
# geom_hline(yintercept=opts$min.acc.rate, colour="black", linetype="dashed") +
barplot_theme() +
# scale_y_continuous(expand=c(0,0), limits=c(0,4e+6)) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
print(p)
# pdf(file=paste0(io$outdir,"/qc_acc.pdf"), width=8, height=5)
# print(p1)
# dev.off()
library(data.table)
library(purrr)
library(ggplot2)
library(ggpubr)
if (grepl("ricard",Sys.info()['nodename'])) {
source("/Users/ricard/Guo_2017/settings.R")
} else if (grepl("yoda",Sys.info()['nodename'])) {
source("/homes/ricard/Guo_2017/settings.R")
} else {
stop("Computer not recognised")
}
io$outdir <- paste0(io$basedir,"/acc/qc")
# Define which cells to use
opts$cells <- sample_metadata %>% .[,id_acc] %>% as.character
sample_metadata <- sample_metadata %>% .[id_acc%in%opts$cells]
dt <- list()
for (i in opts$cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$acc_data_raw,i))) {
dt[[i]] <- fread(
file = sprintf("%s/%s.tsv.gz",io$acc_data_raw,i),
sep="\t", verbose=F, header=F, colClasses = list(factor=1, integer=2, numeric=3)
) %>% setnames(c("chr","pos","rate")) %>%
.[chr=="M"] %>%
.[,id_acc:=as.factor(i)]
} else {
print(sprintf("Sample %s not found",i))
}
}
gc(reset=T)
library(data.table)
library(purrr)
library(ggplot2)
library(ggpubr)
if (grepl("ricard",Sys.info()['nodename'])) {
source("/Users/ricard/Guo_2017/settings.R")
} else if (grepl("yoda",Sys.info()['nodename'])) {
source("/homes/ricard/Guo_2017/settings.R")
} else {
stop("Computer not recognised")
}
io$outdir <- paste0(io$basedir,"/acc/stats")
io$pdfdir <- paste0(io$basedir,"/acc/results/sex")
# Define which chromosomes to look at
opts$chr <- c("X","Y","1")
# Define which cells to use
opts$cells <- sample_metadata %>% .[,id_acc]
